package foundation.icon.btp.bmv;

import foundation.icon.btp.bmv.lib.HexConverter;
import foundation.icon.btp.bmv.lib.mpt.MPTException;
import foundation.icon.btp.bmv.lib.mpt.Trie;
import foundation.icon.btp.bmv.types.Receipt;
import foundation.icon.btp.bmv.types.RelayMessage;
import i.IInstrumentation;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import testutils.TestInstrumentation;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

public class ReceiptTest {

    @BeforeEach
    public void setup() throws Exception {
        IInstrumentation.attachedThreadInstrumentation.set(new TestInstrumentation());
    }

    @AfterEach
    public void tearDown() throws Exception {
        IInstrumentation.attachedThreadInstrumentation.remove();
    }

    /**
     * Test sample data: beb20_tx_1.json
     *
     * @throws MPTException
     */
    @Test
    public void trieFromProofsTest() throws MPTException {
       List<byte[]> encodedProof = new ArrayList<>();
       byte[] root = HexConverter.hexStringToByteArray("fd98a32d62e7d3209b79727a0af3f911137d5686f286fcea51a3d3c58596033d");
       encodedProof.add(HexConverter.hexStringToByteArray("f851a0b901a268ad64e9356dd317dcaade0ba6052bf7afcede80a83efda3362f01e53680808080808080a0ed7cf8b4b1d9aff50a30a59e8f833ff8ef3a02d2545f591e18cba63eeee59fc08080808080808080"));
       encodedProof.add(HexConverter.hexStringToByteArray("f9066830b90664f90661018307f667bf90556f89b948c2e5fc5d651129ce7296847dcfac62c646e4e3df863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa000000000000000000000000070e789d2f5d469ea30e0525dbfdd5515d6ead30da000000000000000000000000081c0094f73123eebd250ab4ee1e8aa6e82a7ca6fa0000000000000000000000000000000000000000000000000000000000000000af89b948c2e5fc5d651129ce7296847dcfac62c646e4e3df863a08c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a000000000000000000000000070e789d2f5d469ea30e0525dbfdd5515d6ead30da000000000000000000000000081c0094f73123eebd250ab4ee1e8aa6e82a7ca6fa00000000000000000000000000000000000000000000000000000000000000000f9021a94aafc8eeaee8d9c8bd3262cce3d73e56dee3fb776e1a037be353f216cf7e33639101fd610c542e6a0c0109173fa1c1d8b04d34edb7c1bb901e00000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000003e6274703a2f2f30786638616163332e69636f6e2f637865613139613764366539613932363736376431643035656561343637323939666534363163306562000000000000000000000000000000000000000000000000000000000000000000f7f8f5b8396274703a2f2f307839372e6273632f307841614663384565614545386439433862443332363243434533443733453536446545334642373736b83e6274703a2f2f30786638616163332e69636f6e2f63786561313961376436653961393236373637643164303565656134363732393966653436316330656288546f6b656e42534800b86ef86c00b869f867b3307837306537383964326635643436396561333065303532356462666464353531356436656164333064000000000000000000aa637861616462666536346236613465656262623335616464306439663036363335363964626239613138c7c6834554480a00000000000000000000f901fc9430802e869941c6347a904ca034840a30b1d728baf842a050d22373bb84ed1f9eeb581c913e6d45d918c05f8b1d90f0be168f06a4e6994aa000000000000000000000000070e789d2f5d469ea30e0525dbfdd5515d6ead30db901a00000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000003e6274703a2f2f30786638616163332e69636f6e2f6378616164626665363462366134656562626233356164643064396630363633353639646262396131380000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034554480000000000000000000000000000000000000000000000000000000000"));
       byte[] enc = Trie.verifyProof(root, new byte[]{-128}, encodedProof);
       Receipt receipt = Receipt.fromBytes(enc);
       assertNotNull(receipt);
       //assertEquals(receipt.getLogs().size(), 1);
    }

    @Test
    public void testReceiptProveFromRelayMessage() throws MPTException {
        String msg = "-Q0i-QSKuQSH-QSEuQJf-QJcoAJfca9eQZxqqo1zYO5O1hmn9YSlssfHePEJ52fb4lmBoB3MTejex116q4W1Z7bM1BrTEkUblIp0E_ChQv1A1JNHlEiUgpfDI27D6myV9O7CL9sYJV5VoKaBfriLsDkVrjyBO4qVp_nwMMG21Pdb2etE2InDdnLQoPLIkC_m1qtWPDHJ-pe-JpOs2R_DCr6cmI93dBosoNQ2oH-v5Wudtrki0Ank9ckcykgG2PbJrKi66ui1Xezoby6euQEAAAAAAgAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARAAAACAAAAAAAAgAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhAAABABAAAAAAAAAAAAAAAAgAIAAAAAQAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAEAgAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAIAAIAAAAAAAAIAAAAAAAAAAAAAAABBAAAAAACACAAAAAAAAAAAAAAAAAAEAAAQAAAAAAAAAAAAAAIAAAAKCAJGEAcnDgIMhVGmEYXS8b7hh2IMBAQGEZ2V0aIhnbzEuMTYuOYVsaW51eAAAAKWw-SF_bZ6eKoeH1cNlikKWbGYwh4JnxxNcavSqGGfLgRVcIl3i6rjSBNNVFGu_cQKJqW-mdZnd9NtIjymElI0EPxAHAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIgAAAAAAAAAAPgAuQId-QIaYaACX3GvXkGcaqqNc2DuTtYZp_WEpbLHx3jxCedn2-JZgaAdzE3o3sddequFtWe2zNQa0xJFG5SKdBPwoUL9QNSTR5RIlIKXwyNuw-pslfTuwi_bGCVeVaCmgX64i7A5Fa48gTuKlaf58DDBttT3W9nrRNiJw3Zy0KDyyJAv5tarVjwxyfqXviaTrNkfwwq-nJiPd3QaLKDUNqB_r-Vrnba5ItAJ5PXJHMpIBtj2yayouurotV3s6G8unrkBAAAAAAIAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEQAAAAgAAAAAAAIAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIQAAAQAQAAAAAAAAAAAAAAAIACAAAAAEAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAABAIAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAACAACAAAAAAAACAAAAAAAAAAAAAAAAQQAAAAAAgAgAAAAAAAAAAAAAAAAABAAAEAAAAAAAAAAAAAACAAAACgZGEAcnDgIMhVGmEYXS8b6DYgwEBAYRnZXRoiGdvMS4xNi45hWxpbnV4AAAApbD5IaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIgAAAAAAAAAAPgA-QiQuQiN-QiKAbkGAfkF_rhT-FGgJu7youaW7nH-NCFf1NfQECmMGanhHbcmfVnEkCgA9LSAgICAgICAoC9iE2zqDveElWLL8IuPRyuhxoLTiNbRYPjO7qY744-TgICAgICAgIC4c_hxgKDEZj9F1koEw_PnTseDOVLsu4mouefw7xwKMjIfw3me7qBYUZSi7olJv8_SkGFn2ml801ST_Sq-eeXanXbrrH_XZaAwRLYzWzwu8JGBMXbWH_0mG6wvVT3WI_fRo7gQpk7lsICAgICAgICAgICAgIC5BTH5BS4guQUq-QUnAYMhQL-5AQAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAIAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAA-QQc-QIalKr8jurujZyL0yYszj1z5W3uP7d24aA3vjU_IWz34zY5EB_WEMVC5qDAEJFz-hwdiwTTTtt8G7kB4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA-YnRwOi8vMHgzZDdkNTMuaWNvbi9jeGFmNjcyNTJkMzdhNmM1MTFmMTM5YzEyZmVlMTE1ZjczODNlZmVkZDkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD3-PW4OWJ0cDovLzB4OTcuYnNjLzB4QWFGYzhFZWFFRThkOUM4YkQzMjYyQ0NFM0Q3M0U1NkRlRTNGQjc3Nrg-YnRwOi8vMHgzZDdkNTMuaWNvbi9jeGFmNjcyNTJkMzdhNmM1MTFmMTM5YzEyZmVlMTE1ZjczODNlZmVkZDmKbmF0aXZlY29pbgG4bPhqALhn-GWqMHg3MEU3ODlEMmY1RDQ2OWVBMzBlMDUyNURiZkRENTUxNWQ2RUFkMzBEqmh4ZmVjZDEzYTI4MWRiNTQ0ODJlNWM4OGQ4ZmViMmU1YTNjZTE4YjA5OM7Ng0JOQogNvS_BN6I8sAAAAAAAAAAAAPkB_JR1wWtCBCY_R1WDUcPzJBdIkMb4xPhCoFDSI3O7hO0fnutYHJE-bUXZGMBfix2Q8L4Wjwak5plKoAAAAAAAAAAAAAAAAHDnidL11GnqMOBSXb_dVRXW6tMNuQGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD5idHA6Ly8weDNkN2Q1My5pY29uL2h4ZmVjZDEzYTI4MWRiNTQ0ODJlNWM4OGQ4ZmViMmU1YTNjZTE4YjA5OAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADb0vwTeiPLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAI4byb8HDUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQk5CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD5AoL5An8AuQJ7-QJ4qjB4QWFGYzhFZWFFRThkOUM4YkQzMjYyQ0NFM0Q3M0U1NkRlRTNGQjc3NuGgN741PyFs9-M2ORAf1hDFQuagwBCRc_ocHYsE007bfBu5AeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPmJ0cDovLzB4M2Q3ZDUzLmljb24vY3hhZjY3MjUyZDM3YTZjNTExZjEzOWMxMmZlZTExNWY3MzgzZWZlZGQ5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA9_j1uDlidHA6Ly8weDk3LmJzYy8weEFhRmM4RWVhRUU4ZDlDOGJEMzI2MkNDRTNENzNFNTZEZUUzRkI3Nza4PmJ0cDovLzB4M2Q3ZDUzLmljb24vY3hhZjY3MjUyZDM3YTZjNTExZjEzOWMxMmZlZTExNWY3MzgzZWZlZGQ5im5hdGl2ZWNvaW4BuGz4agC4Z_hlqjB4NzBFNzg5RDJmNUQ0NjllQTMwZTA1MjVEYmZERDU1MTVkNkVBZDMwRKpoeGZlY2QxM2EyODFkYjU0NDgyZTVjODhkOGZlYjJlNWEzY2UxOGIwOTjOzYNCTkKIDb0vwTeiPLAAAAAAAAAAAACCAJGgQgtJWpUvomGU5lCiKIhWTtLUUSQb3XM8O09BSOvtdzIBoDR5qtRsFVYoGYcOnMlMO73xw7PcXCiLnYMuqkTmJ_uDAAA=";

        byte[] _msg = Base64.getUrlDecoder().decode(msg.trim().getBytes());
        var rm = RelayMessage.fromBytes(_msg);

     /*   assertEquals(BigInteger.valueOf(97), rm.getBlockUpdates()[0].getBlockHeader().getNetwork());
        assertEquals(BigInteger.valueOf(145), rm.getBlockUpdates()[0].getBlockHeader().getNumber());
*/
        var rp = rm.getReceiptProofs()[0];
/*        assertEquals(3, rp.getMptProofs().size());*/
//        assertEquals(BigInteger.valueOf(145), rm.getBlockUpdates()[0].getBlockHeader().getNumber());
        assertEquals(new byte[]{1}, rp.getMptKey());
        assertEquals(1, rp.getIndex());

        /*Receipt receipt = rp.prove(rm.getBlockUpdates()[0].getBlockHeader().getReceiptsRoot());
        assertNotNull(receipt);
        assertEquals(3, rp.getMptProofs().size());
        assertEquals(4, receipt.getLogs().size());*/
    }
}