package foundation.icon.btp.bmv;

import com.iconloop.testsvc.Account;
import com.iconloop.testsvc.Score;
import com.iconloop.testsvc.ServiceManager;
import com.iconloop.testsvc.TestBase;
import foundation.icon.btp.bmv.lib.mpt.MPTException;
import foundation.icon.btp.bmv.types.BlockHeader;
import foundation.icon.btp.bmv.types.RelayMessage;
import foundation.icon.icx.KeyWallet;
import org.bouncycastle.util.encoders.Hex;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.*;

import java.io.IOException;
import java.math.BigInteger;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Base64;

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class RelayMessageTest extends TestBase {

    final static String RLPn = "RLPn";
    private static final ServiceManager sm = getServiceManager();

    private static final int rootSize = 3;
    private static final int cacheSize = 10;
    private static final String sol_bmc = "0xAaFc8EeaEE8d9C8bD3262CCE3D73E56DeE3FB776";
    private static final int offset = 177;
    private static final boolean isAllowNewerWitness = true;

    private static Score bmv;
    private static KeyWallet[] accounts;
    private static String currentBMCAdd;
    private static String currentBMCNet;
    private static String prevBMCAdd;
    private static String prevBMCnet;  //also destination network

    private static String currentBMCBTPAdd;
    private static String prevBMCBTPAdd;

    private static Account[] owners;

    @BeforeAll
    public static void setup() throws Exception {
        accounts = new KeyWallet[5];
        owners = new Account[3];
        for (int i = 0; i < owners.length; i++) {
            owners[i] = sm.createAccount(100);
        }
        for (int i = 0; i < accounts.length; i++) {
            accounts[i] = KeyWallet.create();
        }
        currentBMCAdd = owners[0].getAddress().toString();
        currentBMCNet = "0x03.iconee";
        prevBMCAdd = sol_bmc;
        prevBMCnet = "0x97.bsc"; //also destination network

        currentBMCBTPAdd = "btp://" + currentBMCNet + "/" + currentBMCAdd;
        prevBMCBTPAdd = "btp://" + prevBMCnet + "/" + prevBMCAdd;

        bmv = sm.deploy(owners[0], BTPMessageVerifier.class, currentBMCAdd, prevBMCnet, offset, rootSize, cacheSize, isAllowNewerWitness);

    }

    @Test
    @Order(1)
    public void test_handleRelayMessage() throws MPTException, IOException {
        var msg = "-Q7g-QVDuQVA-QU9uQJf-QJcoK_jOxlhJ7e18RWMDZuRe3d0uGpM_NkoEt5T-ZHfDag1oB3MTejex116q4W1Z7bM1BrTEkUblIp0E_ChQv1A1JNHlEiUgpfDI27D6myV9O7CL9sYJV5VoJkHWu4VWpuWb8vVTLUfSxXBGzXGcQdVLAW22w0sVRN3oBcz_cehPVsFV9DJ34d_hCMKxmy49fqpqYNK5Klv4ffroHH-SRPW5mtAjKTq53XU-JVxLo9AyHpIdPCS05GXX8PduQEAAAAAAgAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARAAAAAAAAAAAAAgAAAAAACAAAAAAAAAAAAAACAAAEAAAAAAAAAAAAAACAAAAAAhAAABABAAAAAAAAEAAAAAAAgAIAAQAAQAAAAAAAAAAAAAAAABAAAAAAAAEAAAAAIAEAAAAAAAAAAAAAAAAAAAAAAEAgAAAAAAAAAAAAAACAIAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAoAAIAAAAAAAAAAAAAAAAAAAAAAAABBAEAAAACAKEAAAAAAAAAAAAAAAAAEAAAQAAAAAAAAAAAAAAIEAAAKCALKEATAasYMIfRqEYWmf17hh2IMBAAaEZ2V0aIhnbzEuMTYuNoVsaW51eAAAABHAqp7LYVEnglc6-tE_8tmiVGxcswAWScbwiaKwPYy8aHkM5Tf2GIiVkWlx61OZOwy-kfIdQTXTe6_xLvwT5GOno2tJAaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIgAAAAAAAAAALh4TRvmTw6aRmwuZqU0M5KBkng-Kfj6Ib6yEzSZte93D2AAAADo1KUQAJkwiqNlxAVUvImYKvUF2F2pUlFEXV3Uqbs33SWE_ZLTAAAA6NSlEAABd2kg_wsPONeM-VwDPCGt9wRXhRFOOSp1RBeWUuCmEgAAAOjUpRAAuQJe-QJboK_jOxlhJ7e18RWMDZuRe3d0uGpM_NkoEt5T-ZHfDag1oB3MTejex116q4W1Z7bM1BrTEkUblIp0E_ChQv1A1JNHlEiUgpfDI27D6myV9O7CL9sYJV5VoJkHWu4VWpuWb8vVTLUfSxXBGzXGcQdVLAW22w0sVRN3oBcz_cehPVsFV9DJ34d_hCMKxmy49fqpqYNK5Klv4ffroHH-SRPW5mtAjKTq53XU-JVxLo9AyHpIdPCS05GXX8PduQEAAAAAAgAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARAAAAAAAAAAAAAgAAAAAACAAAAAAAAAAAAAACAAAEAAAAAAAAAAAAAACAAAAAAhAAABABAAAAAAAAEAAAAAAAgAIAAQAAQAAAAAAAAAAAAAAAABAAAAAAAAEAAAAAIAEAAAAAAAAAAAAAAAAAAAAAAEAgAAAAAAAAAAAAAACAIAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAoAAIAAAAAAAAAAAAAAAAAAAAAAAABBAEAAAACAKEAAAAAAAAAAAAAAAAAEAAAQAAAAAAAAAAAAAAIEAAAKBsoQBMBqxgwh9GoRhaZ_XuGHYgwEABoRnZXRoiGdvMS4xNi42hWxpbnV4AAAAEcCqnsthUSeCVzr60T_y2aJUbFyzABZJxvCJorA9jLxoeQzlN_YYiJWRaXHrU5k7DL6R8h1BNdN7r_Eu_BPkY6eja0kBoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiAAAAAAAAAAA-AD5CZW5CZL5CY8AuQbm-QbjuFP4UaDLwTuKEn_GjjdUZ7wIiOuiDJSPdROPfhnlJHNRyqYZHYCAgICAgICgKDVjoWMIA6ixjODm6KoJnM5tmebNGcRlkXhgwMJ1GpKAgICAgICAgLkGi_kGiDC5BoT5BoEBgwhpcLkBAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAgAABAAAAAAAAAAAAAAAgAAAAAAAAAAQAQAAAAAAABAAAAAAAAAAAAEAAEAAAAAAAAAAAAAAAAAQAAAAAAABAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAgCAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAgChAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACBAAD5BXb4m5S6NPPGiTsS_0EVrPG0cSxuJ4Otg_hjoN3yUq0b4sibacKwaPw3jaqVK6fxY8ShFij1Wk31I7PvoAAAAAAAAAAAAAAAAHDnidL11GnqMOBSXb_dVRXW6tMNoAAAAAAAAAAAAAAAAHGhUgu7fmByu_NoKmDHPWO2k2kKoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3gtrOnZAAA-JuUujTzxok7Ev9BFazxtHEsbieDrYP4Y6CMW-Hl6-x9W9FPcUJ9HoTz3QMUwPeyKR5bIArIx8O5JaAAAAAAAAAAAAAAAABw54nS9dRp6jDgUl2_3VUV1urTDaAAAAAAAAAAAAAAAABxoVILu35gcrvzaCpgxz1jtpNpCqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPkCOpSq_I7q7o2ci9MmLM49c-Vt7j-3duGgN741PyFs9-M2ORAf1hDFQuagwBCRc_ocHYsE007bfBu5AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPmJ0cDovLzB4OTU0YWEzLmljb24vY3g0OWMwZWE2YWViMmYyMjMwOGE3NjMxN2YwMTY5OWViY2Y2Mzg4YmNiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABB_kBBLg5YnRwOi8vMHg5Ny5ic2MvMHhBYUZjOEVlYUVFOGQ5QzhiRDMyNjJDQ0UzRDczRTU2RGVFM0ZCNzc2uD5idHA6Ly8weDk1NGFhMy5pY29uL2N4NDljMGVhNmFlYjJmMjIzMDhhNzYzMTdmMDE2OTllYmNmNjM4OGJjYohUb2tlbkJTSAG4ffh7ALh4-HazMHg3MGU3ODlkMmY1ZDQ2OWVhMzBlMDUyNWRiZmRkNTUxNWQ2ZWFkMzBkAAAAAAAAAAAAqmh4MzliMzg4YmUxNzUyNTg1NmNhMDg4YmRjYzMwZjFhMzRiNDYwOGEwMdbVg0VUSIgNvS_BN6MAAIcjhvJvwQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPkB_JQ6vI3_DJW4mCOZ2s9u1b17lKQAaPhCoFDSI3O7hO0fnutYHJE-bUXZGMBfix2Q8L4Wjwak5plKoAAAAAAAAAAAAAAAAHDnidL11GnqMOBSXb_dVRXW6tMNuQGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD5idHA6Ly8weDk1NGFhMy5pY29uL2h4MzliMzg4YmUxNzUyNTg1NmNhMDg4YmRjYzMwZjFhMzRiNDYwOGEwMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADb0vwTejAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAI4byb8EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADRVRIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD5AqL5Ap8CuQKb-QKYqjB4QWFGYzhFZWFFRThkOUM4YkQzMjYyQ0NFM0Q3M0U1NkRlRTNGQjc3NuGgN741PyFs9-M2ORAf1hDFQuagwBCRc_ocHYsE007bfBu5AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPmJ0cDovLzB4OTU0YWEzLmljb24vY3g0OWMwZWE2YWViMmYyMjMwOGE3NjMxN2YwMTY5OWViY2Y2Mzg4YmNiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABB_kBBLg5YnRwOi8vMHg5Ny5ic2MvMHhBYUZjOEVlYUVFOGQ5QzhiRDMyNjJDQ0UzRDczRTU2RGVFM0ZCNzc2uD5idHA6Ly8weDk1NGFhMy5pY29uL2N4NDljMGVhNmFlYjJmMjIzMDhhNzYzMTdmMDE2OTllYmNmNjM4OGJjYohUb2tlbkJTSAG4ffh7ALh4-HazMHg3MGU3ODlkMmY1ZDQ2OWVhMzBlMDUyNWRiZmRkNTUxNWQ2ZWFkMzBkAAAAAAAAAAAAqmh4MzliMzg4YmUxNzUyNTg1NmNhMDg4YmRjYzMwZjFhMzRiNDYwOGEwMdbVg0VUSIgNvS_BN6MAAIcjhvJvwQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIIAsqAdEVHU6th_u871_mmQnTm4rvQds4w24kN2AGdliW49XACghrDU6vZIptUkSqA099KrjWdqU18DdAqCRVFkNu2TaHUCAA==";
        byte[] _msg = Base64.getUrlDecoder().decode(msg.trim().getBytes());
        bmv.invoke(owners[0], "handleRelayMessage", currentBMCBTPAdd, prevBMCBTPAdd, BigInteger.valueOf(1), msg);
    }

    @Test
    @Order(2)
    public void verifySignatureTest() throws MPTException, IOException {
        var headerBytes = "f9025ca09d996196750bf2c1ed51f55fc08afa68c8571cc7700fc34521a843d99a034b7ca01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d493479496c5d20b2a975c050e4220be276ace4892f4b41aa04db5fbf990816f80792ceb8054d569715f848a80a6cc1a07eed0df5e4c55e1d2a00e7b0c2d8617b29440b1be5538e335ea3234608a449be7f2627de8e92ad1e7e7a05dd941745a4e6236fe79a0b6bb2333e18c9cf4601a548e381ff8a3196dee82d0ba100418401c9c38082d0c68460ed4ef6b861d883010006846765746888676f312e31352e35856c696e75780000001600553d240cc9838de0cd2c0774ba6a18019b8e00d816a611ee48afcb8df7753602277c01eedc1b26f3b8e341ec36862674c1087768bad5a319348f26107d1bed4a415701a00000000000000000000000000000000000000000000000000000000000000000880000000000000000";
        BlockHeader.verifyValidatorSignature(Hex.decode(headerBytes));
    }

    @Test
    public void relayMessageDecode() throws IOException {
        var msg = Files.readString(Path.of("relaymessage"));
        System.out.println(msg);
        byte[] _msg = Base64.getUrlDecoder().decode(msg.trim().getBytes());
        var relayMessage = RelayMessage.fromBytes(_msg);
        var receiptProof = relayMessage.getReceiptProofs()[0];
    }
}
