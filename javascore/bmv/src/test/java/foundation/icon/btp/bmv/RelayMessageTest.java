package foundation.icon.btp.bmv;

import com.iconloop.testsvc.Account;
import com.iconloop.testsvc.Score;
import com.iconloop.testsvc.ServiceManager;
import com.iconloop.testsvc.TestBase;
import foundation.icon.btp.bmv.lib.mpt.MPTException;
import foundation.icon.btp.bmv.types.BlockHeader;
import foundation.icon.btp.bmv.types.RelayMessage;
import foundation.icon.icx.KeyWallet;
import org.bouncycastle.util.encoders.Hex;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.*;

import java.io.IOException;
import java.math.BigInteger;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Base64;

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class RelayMessageTest extends TestBase {

    final static String RLPn = "RLPn";
    private static final ServiceManager sm = getServiceManager();

    private static final int rootSize = 3;
    private static final int cacheSize = 10;
    private static final String sol_bmc = "0xAaFc8EeaEE8d9C8bD3262CCE3D73E56DeE3FB776";
    private static final int offset = 158;
    private static final boolean isAllowNewerWitness = true;

    private static Score bmv;
    private static KeyWallet[] accounts;
    private static String currentBMCAdd;
    private static String currentBMCNet;
    private static String prevBMCAdd;
    private static String prevBMCnet;  //also destination network

    private static String currentBMCBTPAdd;
    private static String prevBMCBTPAdd;

    private static Account[] owners;

    @BeforeAll
    public static void setup() throws Exception {
        accounts = new KeyWallet[5];
        owners = new Account[3];
        for (int i = 0; i < owners.length; i++) {
            owners[i] = sm.createAccount(100);
        }
        for (int i = 0; i < accounts.length; i++) {
            accounts[i] = KeyWallet.create();
        }
        currentBMCAdd = owners[0].getAddress().toString();
        currentBMCNet = "0x03.iconee";
        prevBMCAdd = sol_bmc;
        prevBMCnet = "0x97.bsc"; //also destination network

        currentBMCBTPAdd = "btp://" + currentBMCNet + "/" + currentBMCAdd;
        prevBMCBTPAdd = "btp://" + prevBMCnet + "/" + prevBMCAdd;

        bmv = sm.deploy(owners[0], BTPMessageVerifier.class, currentBMCAdd, prevBMCnet, offset, rootSize, cacheSize, isAllowNewerWitness);

    }

    @Test
    @Order(1)
    public void test_handleRelayMessage() throws MPTException, IOException {
        var msg = "-ROh-QoEuQT_-QT8uQJf-QJcoET7Z7J2bxGTHBzyKwFn04fK06YBvQjNqX9hZITYrIcNoB3MTejex116q4W1Z7bM1BrTEkUblIp0E_ChQv1A1JNHlEiUgpfDI27D6myV9O7CL9sYJV5VoAvku0NIlbQkaIQbv5UiU7ZuHzd3bFPtetWVgHBcX_mxoLR2fmNvVTxEGL28KlWr0b5I8yGhfxfMARowcaeK49g6oKxytY3qSLXiOJUkdnDXCDzWeJEYbzPKbE3HnlH40sYLuQEAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhAAAAAAAAAAAAAAAAAAAAAAgAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAIAAAAAAAAAAAAAAAAAAAAAAAABBAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAQAAAAAAAAAAAAAAAAAAAKCAJ-EAUeUkYMY5zOEYW54xbhh2IMBAAaEZ2V0aIhnbzEuMTYuNoVsaW51eAAAABHAqp4eWX_dLmxblUco2aybYEtIdN82Liiw6euH5VWTauDXbVw9Im23MiWOoA4bgMUUftjWkvg4iQTezb-H98xaLROBAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIgAAAAAAAAAALh4TRvmTw6aRmwuZqU0M5KBkng-Kfj6Ib6yEzSZte93D2AAAADo1KUQAJkwiqNlxAVUvImYKvUF2F2pUlFEXV3Uqbs33SWE_ZLTAAAA6NSlEAABd2kg_wsPONeM-VwDPCGt9wRXhRFOOSp1RBeWUuCmEgAAAOjUpRAAuQId-QIaYaBE-2eydm8Rkxwc8isBZ9OHytOmAb0Izal_YWSE2KyHDaAdzE3o3sddequFtWe2zNQa0xJFG5SKdBPwoUL9QNSTR5RIlIKXwyNuw-pslfTuwi_bGCVeVaAL5LtDSJW0JGiEG7-VIlO2bh83d2xT7XrVlYBwXF_5saC0dn5jb1U8RBi9vCpVq9G-SPMhoX8XzAEaMHGniuPYOqCscrWN6ki14jiVJHZw1wg81niRGG8zymxNx55R-NLGC7kBAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIQAAAAAAAAAAAAAAAAAAAAAIACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAACAAAAAAAAAAAAAAAAAAAAAAAAAQQAAAAAAAAAAAAAAAAAAAAAAAAAABAAAEAAAAAAAAAAAAAAAAAAACgZ-EAUeUkYMY5zOEYW54xaDYgwEABoRnZXRoiGdvMS4xNi42hWxpbnV4AAAAEcCqnqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIgAAAAAAAAAALkE__kE_LkCX_kCXKA9CDghdEWs5sWb3p4ztAEWB0FcoH43lA1zbb-1d4dsB6AdzE3o3sddequFtWe2zNQa0xJFG5SKdBPwoUL9QNSTR5RIlIKXwyNuw-pslfTuwi_bGCVeVaCDnfN9LRvJqP0i4LX6enVimeg5I_Eo_6q2NTW8uTCjwaCb0Tze29bEDSMPlmcU0KC8xoI-rOJBWJGT6ZQRmahk9qCKEIeTZrZvi0NQU-AqJuwMSm-q_Y8I1p4gOYc7S3b3q7kBAAAAAAIAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEQAAAAAAAAAAAAIAAAAAAAgAAAAAAAAAAAAAAgAABAAAAAAAAAAAAAAAgAAAAAIQAAAQAQAAAAAAABAAAAAAAIACAAEAAEAAAAAAAAAAAAAAAAAQAAAAAAABAAAAACABAAAAAAAAAAAAAAAAAAAAAABAIAAAAAAAAAAAAAAAgCAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAKAACAAAAAAAAAAAAAAAAAAAAAAAAAQQBAAAAAgChAAAAAAAAAAAAAAAAABAAAEAAAAAAAAAAAAAACBAAACggCghAFGTP6DCH0ahGFueMi4YdiDAQAGhGdldGiIZ28xLjE2LjaFbGludXgAAAARwKqeLE8JyMG15mqNDrSX87yt46BG2SgQjfPTGi64NOGVyWloWW0jj-Td9adKD5r9g4vr-AELYgZ4gVGUEtx0fc-DRwCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACIAAAAAAAAAAC4eE0b5k8OmkZsLmalNDOSgZJ4Pin4-iG-shM0mbXvdw9gAAAA6NSlEACZMIqjZcQFVLyJmCr1BdhdqVJRRF1d1Km7N90lhP2S0wAAAOjUpRAAAXdpIP8LDzjXjPlcAzwhrfcEV4URTjkqdUQXllLgphIAAADo1KUQALkCHfkCGmGgPQg4IXRFrObFm96eM7QBFgdBXKB-N5QNc22_tXeHbAegHcxN6N7HXXqrhbVntszUGtMSRRuUinQT8KFC_UDUk0eUSJSCl8MjbsPqbJX07sIv2xglXlWgg53zfS0byaj9IuC1-np1YpnoOSPxKP-qtjU1vLkwo8Ggm9E83tvWxA0jD5ZnFNCgvMaCPqziQViRk-mUEZmoZPagihCHk2a2b4tDUFPgKibsDEpvqv2PCNaeIDmHO0t296u5AQAAAAACAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEAAAAAAAAAAAACAAAAAAAIAAAAAAAAAAAAAAIAAAQAAAAAAAAAAAAAAIAAAAACEAAAEAEAAAAAAAAQAAAAAACAAgABAABAAAAAAAAAAAAAAAAAEAAAAAAAAQAAAAAgAQAAAAAAAAAAAAAAAAAAAAAAQCAAAAAAAAAAAAAAAIAgAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAACgAAgAAAAAAAAAAAAAAAAAAAAAAAAEEAQAAAAIAoQAAAAAAAAAAAAAAAAAQAABAAAAAAAAAAAAAAAgQAAAoGghAFGTP6DCH0ahGFueMig2IMBAAaEZ2V0aIhnbzEuMTYuNoVsaW51eAAAABHAqp6gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACIAAAAAAAAAAD4APkJlbkJkvkJjwC5Bub5BuO4U_hRoMvBO4oSf8aON1RnvAiI66IMlI91E49-GeUkc1HKphkdgICAgICAgKBF3V78CSMYM2HwlO2mseYFpJJN6xv84hV_mm2F2merfoCAgICAgICAuQaL-QaIMLkGhPkGgQGDCGlwuQEAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAACAAAEAAAAAAAAAAAAAACAAAAAAAAAABABAAAAAAAAEAAAAAAAAAAAAQAAQAAAAAAAAAAAAAAAABAAAAAAAAEAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAACAIAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAACAKEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIEAAPkFdviblLo088aJOxL_QRWs8bRxLG4ng62D-GOg3fJSrRviyJtpwrBo_DeNqpUrp_FjxKEWKPVaTfUjs--gAAAAAAAAAAAAAAAAcOeJ0vXUaeow4FJdv91VFdbq0w2gAAAAAAAAAAAAAAAAcaFSC7t-YHK782gqYMc9Y7aTaQqgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADeC2s6dkAAD4m5S6NPPGiTsS_0EVrPG0cSxuJ4Otg_hjoIxb4eXr7H1b0U9xQn0ehPPdAxTA97IpHlsgCsjHw7kloAAAAAAAAAAAAAAAAHDnidL11GnqMOBSXb_dVRXW6tMNoAAAAAAAAAAAAAAAAHGhUgu7fmByu_NoKmDHPWO2k2kKoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA-QI6lKr8jurujZyL0yYszj1z5W3uP7d24aA3vjU_IWz34zY5EB_WEMVC5qDAEJFz-hwdiwTTTtt8G7kCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA-YnRwOi8vMHg5NTRhYTMuaWNvbi9jeDBlYjI2ODllN2FlYmM0YTFkYjhkZGI2YWQ0ZDRmZDI5MDQ2MjkyYTQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEH-QEEuDlidHA6Ly8weDk3LmJzYy8weEFhRmM4RWVhRUU4ZDlDOGJEMzI2MkNDRTNENzNFNTZEZUUzRkI3Nza4PmJ0cDovLzB4OTU0YWEzLmljb24vY3gwZWIyNjg5ZTdhZWJjNGExZGI4ZGRiNmFkNGQ0ZmQyOTA0NjI5MmE0iFRva2VuQlNIAbh9-HsAuHj4drMweDcwZTc4OWQyZjVkNDY5ZWEzMGUwNTI1ZGJmZGQ1NTE1ZDZlYWQzMGQAAAAAAAAAAACqaHhhNzkyNzdkZGRiZjU1ZGZjZGQxMWFjYmY1YTRmMGJhY2UzMjFmM2Mx1tWDRVRIiA29L8E3owAAhyOG8m_BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA-QH8lDq8jf8MlbiYI5naz27VvXuUpABo-EKgUNIjc7uE7R-e61gckT5tRdkYwF-LHZDwvhaPBqTmmUqgAAAAAAAAAAAAAAAAcOeJ0vXUaeow4FJdv91VFdbq0w25AaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPmJ0cDovLzB4OTU0YWEzLmljb24vaHhhNzkyNzdkZGRiZjU1ZGZjZGQxMWFjYmY1YTRmMGJhY2UzMjFmM2MxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANvS_BN6MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjhvJvwQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANFVEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPkCovkCnwK5Apv5ApiqMHhBYUZjOEVlYUVFOGQ5QzhiRDMyNjJDQ0UzRDczRTU2RGVFM0ZCNzc24aA3vjU_IWz34zY5EB_WEMVC5qDAEJFz-hwdiwTTTtt8G7kCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA-YnRwOi8vMHg5NTRhYTMuaWNvbi9jeDBlYjI2ODllN2FlYmM0YTFkYjhkZGI2YWQ0ZDRmZDI5MDQ2MjkyYTQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEH-QEEuDlidHA6Ly8weDk3LmJzYy8weEFhRmM4RWVhRUU4ZDlDOGJEMzI2MkNDRTNENzNFNTZEZUUzRkI3Nza4PmJ0cDovLzB4OTU0YWEzLmljb24vY3gwZWIyNjg5ZTdhZWJjNGExZGI4ZGRiNmFkNGQ0ZmQyOTA0NjI5MmE0iFRva2VuQlNIAbh9-HsAuHj4drMweDcwZTc4OWQyZjVkNDY5ZWEzMGUwNTI1ZGJmZGQ1NTE1ZDZlYWQzMGQAAAAAAAAAAACqaHhhNzkyNzdkZGRiZjU1ZGZjZGQxMWFjYmY1YTRmMGJhY2UzMjFmM2Mx1tWDRVRIiA29L8E3owAAhyOG8m_BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAggCgoP-vpxIqfsogf94v_QtstUKQTvwy8t0_1x0qf2Bg19bCAKDQ33Cn4hetk-mlW04bRJarBmFQ47na8LSnxu5CpSwqWQIA";
        byte[] _msg = Base64.getUrlDecoder().decode(msg.trim().getBytes());
        bmv.invoke(owners[0], "handleRelayMessage", currentBMCBTPAdd, prevBMCBTPAdd, BigInteger.valueOf(1), msg);
    }

    @Test
    @Order(2)
    public void verifySignatureTest() throws MPTException, IOException {
        var headerBytes = "f9025ca09d996196750bf2c1ed51f55fc08afa68c8571cc7700fc34521a843d99a034b7ca01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d493479496c5d20b2a975c050e4220be276ace4892f4b41aa04db5fbf990816f80792ceb8054d569715f848a80a6cc1a07eed0df5e4c55e1d2a00e7b0c2d8617b29440b1be5538e335ea3234608a449be7f2627de8e92ad1e7e7a05dd941745a4e6236fe79a0b6bb2333e18c9cf4601a548e381ff8a3196dee82d0ba100418401c9c38082d0c68460ed4ef6b861d883010006846765746888676f312e31352e35856c696e75780000001600553d240cc9838de0cd2c0774ba6a18019b8e00d816a611ee48afcb8df7753602277c01eedc1b26f3b8e341ec36862674c1087768bad5a319348f26107d1bed4a415701a00000000000000000000000000000000000000000000000000000000000000000880000000000000000";
        //BlockHeader.verifyValidatorSignature(Hex.decode(headerBytes));
    }

//    @Test
    public void relayMessageDecode() throws IOException {
        var msg = Files.readString(Path.of("relaymessage"));
        System.out.println(msg);
        byte[] _msg = Base64.getUrlDecoder().decode(msg.trim().getBytes());
        var relayMessage = RelayMessage.fromBytes(_msg);
        var receiptProof = relayMessage.getReceiptProofs()[0];
    }
}
