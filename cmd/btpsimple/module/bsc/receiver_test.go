package bsc

import (
	"github.com/icon-project/btp/cmd/btpsimple/module"
	"github.com/icon-project/btp/cmd/btpsimple/module/bsc/binding"
	"github.com/icon-project/btp/common/codec"
	"github.com/icon-project/btp/common/log"
	"math/big"
	"runtime"
	"strings"
)

func findPath() string {
	_, path, _, _ := runtime.Caller(0)
	pathSlice := strings.Split(path, "/")
	return strings.Trim(path, pathSlice[len(pathSlice)-1])
}

/*func TestReceiver_GetReceiptProofs(t *testing.T) {
	var src, dst module.BtpAddress
	err := src.Set("btp://0x97.icon/0xAaFc8EeaEE8d9C8bD3262CCE3D73E56DeE3FB776")
	err = dst.Set("btp://0xa261be.icon/0xa813e24340141101a417B599Db481823C523e788")
	if err != nil {
		fmt.Println(err)
	}
	receiver := NewReceiver(src, dst, "http://localhost:8545", nil, log.New())
	receiver.ReceiveLoop(3950, 2, nil, nil)
}*/

func newReceiptProofs(height int64) ([]*module.ReceiptProof, error) {
	client := NewClient("http://localhost:8545", log.New())
	rps := make([]*module.ReceiptProof, 0)

	block, err := client.GetBlockByHeight(big.NewInt(height))
	if err != nil {
		return nil, err
	}

	receipts, err := client.GetBlockReceipts(block)
	if err != nil {
		return nil, err
	}

	srcContractAddress := HexToAddress("0xAaFc8EeaEE8d9C8bD3262CCE3D73E56DeE3FB776")

	for _, receipt := range receipts {
		rp := &module.ReceiptProof{}

		for _, eventLog := range receipt.Logs {
			if eventLog.Address != srcContractAddress {
				continue
			}
			if bmcMsg, err := binding.UnpackEventLog(eventLog.Data); err == nil {
				rp.Events = append(rp.Events, &module.Event{
					Message:  bmcMsg.Msg,
					Next:     module.BtpAddress(bmcMsg.Next),
					Sequence: bmcMsg.Seq.Int64(),
				})
			}
			proof, err := codec.RLP.MarshalToBytes(*MakeLog(eventLog))
			if err != nil {
				return nil, err
			}
			rp.EventProofs = append(rp.EventProofs, &module.EventProof{
				Index: int(eventLog.Index),
				Proof: proof,
			})
		}

		if len(rp.Events) > 0 {
			//fmt.Println("newReceiptProofs:", rp.Events[0].Message)
			rp.Index = int(receipt.TransactionIndex)
			rp.Proof, err = codec.RLP.MarshalToBytes(*MakeReceipt(receipt))
			if err != nil {
				return nil, err
			}
			rps = append(rps, rp)
		}
	}

	return rps, nil

}

/*func TestReceiver_GetReceiptProof(t *testing.T) {
	rps, _ := newReceiptProofs(4161)

	msg := &icon.RelayMessage{
		BlockUpdates:  make([][]byte, 0),
		ReceiptProofs: make([][]byte, 0),
	}

	for _, rp := range rps {
		trp := &ReceiptProof{
			Index:       rp.Index,
			Proof:       rp.Proof,
			EventProofs: make([]*module.EventProof, 0),
		}
		fmt.Println(trp)

		for _, ep := range rp.EventProofs {
			trp.EventProofs = append(trp.EventProofs, ep)
			//msg.eventSequence = rp.Events[j].Sequence
			//msg.numberOfEvent += 1
		}
		b, err := codec.RLP.MarshalToBytes(trp)
		if err != nil {
			fmt.Println(err)
		}
		msg.ReceiptProofs = append(msg.ReceiptProofs, b)
	}

	b, _ := codec.RLP.MarshalToBytes(msg)

	res := icon.RelayMessage{}
	_, err := codec.RLP.UnmarshalFromBytes(b, &res)
	if err != nil {
		fmt.Println(err)
	}

	var rp module.ReceiptProof
	_, err = codec.RLP.UnmarshalFromBytes(res.ReceiptProofs[0], &rp)
	fmt.Println(rp.EventProofs[0].Index)

	//var ev module.Event
	var ev EVMLog
	_, err = codec.RLP.UnmarshalFromBytes(rp.EventProofs[0].Proof, &ev)
	fmt.Println(ev)
	//rp := &module.ReceiptProof{
	//rm := &module.RelayMessage{}
}*/

/*func Test_ReceiptProof(t *testing.T) {
	file, err := ioutil.ReadFile("/Users/mo/web3labs/icon/btp/devnet/relaymessage")
	if err != nil {
		return
	}

	bytes, _ := base64.URLEncoding.DecodeString(string(file))

	var rm RelayMessage
	_, err = codec.RLP.UnmarshalFromBytes(bytes, &rm)

	if err != nil {
		fmt.Println(err)
	}

	var bu BlockUpdate
	_, err = codec.RLP.UnmarshalFromBytes(rm.BlockUpdates[0], &bu)

	var validators [][]byte
	_, err = codec.RLP.UnmarshalFromBytes(bu.Validators, &validators)
	//fmt.Println("validators", hexutil.Encode(validators[0]))

	var rp module.ReceiptProof
	_, err = codec.RLP.UnmarshalFromBytes(rm.ReceiptProofs[0], &rp)

	var ev EVMLog
	_, err = codec.RLP.UnmarshalFromBytes(rp.EventProofs[0].Proof, &ev)

	if bmcMsg, err := binding.UnpackEventLog(ev.Data); err == nil {
		rp.Events = append(rp.Events, &module.Event{
			Message:  bmcMsg.Msg,
			Next:     module.BtpAddress(bmcMsg.Next),
			Sequence: bmcMsg.Seq.Int64(),
		})

		fmt.Println(bmcMsg.Next, bmcMsg.Seq)
	}
}*/

/*func Test_Decoding(t *testing.T) {
//bytes, err := hexutil.Decode("0xf90acf00b90846f9084300f800018307f558bf906d6f800f800f800f800f8f9aa307838633265354643356436353131323943653732393638343744634661433632633634364534453344f863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa000000000000000000000000070e789d2f5d469ea30e0525dbfdd5515d6ead30da000000000000000000000000081c0094f73123eebd250ab4ee1e8aa6e82a7ca6fa0000000000000000000000000000000000000000000000000000000000000000a820128a079a197281f6105f1c70edf7f0d8a3d5581bf34f1ee116bbbce272f11ca18cc6b00a0856f91bdfc65ee1e77d814019c6a6c2148afda812db6780dbb8cbf72c33a74cc0000f8f9aa307838633265354643356436353131323943653732393638343744634661433632633634364534453344f863a08c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a000000000000000000000000070e789d2f5d469ea30e0525dbfdd5515d6ead30da000000000000000000000000081c0094f73123eebd250ab4ee1e8aa6e82a7ca6fa00000000000000000000000000000000000000000000000000000000000000000820128a079a197281f6105f1c70edf7f0d8a3d5581bf34f1ee116bbbce272f11ca18cc6b00a0856f91bdfc65ee1e77d814019c6a6c2148afda812db6780dbb8cbf72c33a74cc0100f90278aa307841614663384565614545386439433862443332363243434533443733453536446545334642373736e1a037be353f216cf7e33639101fd610c542e6a0c0109173fa1c1d8b04d34edb7c1bb901e00000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000003e6274703a2f2f30786638616163332e69636f6e2f637832373266333538303234323561643734316663363030663537303036316638326236666230643637000000000000000000000000000000000000000000000000000000000000000000f7f8f5b8396274703a2f2f307839372e6273632f307841614663384565614545386439433862443332363243434533443733453536446545334642373736b83e6274703a2f2f30786638616163332e69636f6e2f63783237326633353830323432356164373431666336303066353730303631663832623666623064363788546f6b656e42534800b86ef86c00b869f867b3307837306537383964326635643436396561333065303532356462666464353531356436656164333064000000000000000000aa637861616462666536346236613465656262623335616464306439663036363335363964626239613138c7c6834554480a00000000000000000000820128a079a197281f6105f1c70edf7f0d8a3d5581bf34f1ee116bbbce272f11ca18cc6b00a0856f91bdfc65ee1e77d814019c6a6c2148afda812db6780dbb8cbf72c33a74cc0200f9025aaa307833303830324538363939343143363334376139303443613033343834304133304231643732386261f842a050d22373bb84ed1f9eeb581c913e6d45d918c05f8b1d90f0be168f06a4e6994aa000000000000000000000000070e789d2f5d469ea30e0525dbfdd5515d6ead30db901a00000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000003e6274703a2f2f30786638616163332e69636f6e2f6378616164626665363462366134656562626233356164643064396630363633353639646262396131380000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034554480000000000000000000000000000000000000000000000000000000000820128a079a197281f6105f1c70edf7f0d8a3d5581bf34f1ee116bbbce272f11ca18cc6b00a0856f91bdfc65ee1e77d814019c6a6c2148afda812db6780dbb8cbf72c33a74cc0300a079a197281f6105f1c70edf7f0d8a3d5581bf34f1ee116bbbce272f11ca18cc6b9400000000000000000000000000000000000000008307f558a0856f91bdfc65ee1e77d814019c6a6c2148afda812db6780dbb8cbf72c33a74cc82012800f90282f9027f02b9027bf90278aa307841614663384565614545386439433862443332363243434533443733453536446545334642373736e1a037be353f216cf7e33639101fd610c542e6a0c0109173fa1c1d8b04d34edb7c1bb901e00000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000003e6274703a2f2f30786638616163332e69636f6e2f637832373266333538303234323561643734316663363030663537303036316638326236666230643637000000000000000000000000000000000000000000000000000000000000000000f7f8f5b8396274703a2f2f307839372e6273632f307841614663384565614545386439433862443332363243434533443733453536446545334642373736b83e6274703a2f2f30786638616163332e69636f6e2f63783237326633353830323432356164373431666336303066353730303631663832623666623064363788546f6b656e42534800b86ef86c00b869f867b3307837306537383964326635643436396561333065303532356462666464353531356436656164333064000000000000000000aa637861616462666536346236613465656262623335616464306439663036363335363964626239613138c7c6834554480a00000000000000000000820128a079a197281f6105f1c70edf7f0d8a3d5581bf34f1ee116bbbce272f11ca18cc6b00a0856f91bdfc65ee1e77d814019c6a6c2148afda812db6780dbb8cbf72c33a74cc0200")
bytes, _ := hexutil.Decode("0x

var ev EVMLog
_, err := codec.RLP.UnmarshalFromBytes(bytes, &ev)

if err != nil {
	fmt.Println(err)
}

fmt.Println(ev.Address)

bytes, err = hexutil.Decode("0xf90acf00b90846f9084300f800018307f558bf906d6f800f800f800f800f8f9aa307838633265354643356436353131323943653732393638343744634661433632633634364534453344f863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa000000000000000000000000070e789d2f5d469ea30e0525dbfdd5515d6ead30da000000000000000000000000081c0094f73123eebd250ab4ee1e8aa6e82a7ca6fa0000000000000000000000000000000000000000000000000000000000000000a820128a079a197281f6105f1c70edf7f0d8a3d5581bf34f1ee116bbbce272f11ca18cc6b00a0856f91bdfc65ee1e77d814019c6a6c2148afda812db6780dbb8cbf72c33a74cc0000f8f9aa307838633265354643356436353131323943653732393638343744634661433632633634364534453344f863a08c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a000000000000000000000000070e789d2f5d469ea30e0525dbfdd5515d6ead30da000000000000000000000000081c0094f73123eebd250ab4ee1e8aa6e82a7ca6fa00000000000000000000000000000000000000000000000000000000000000000820128a079a197281f6105f1c70edf7f0d8a3d5581bf34f1ee116bbbce272f11ca18cc6b00a0856f91bdfc65ee1e77d814019c6a6c2148afda812db6780dbb8cbf72c33a74cc0100f90278aa307841614663384565614545386439433862443332363243434533443733453536446545334642373736e1a037be353f216cf7e33639101fd610c542e6a0c0109173fa1c1d8b04d34edb7c1bb901e00000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000003e6274703a2f2f30786638616163332e69636f6e2f637832373266333538303234323561643734316663363030663537303036316638326236666230643637000000000000000000000000000000000000000000000000000000000000000000f7f8f5b8396274703a2f2f307839372e6273632f307841614663384565614545386439433862443332363243434533443733453536446545334642373736b83e6274703a2f2f30786638616163332e69636f6e2f63783237326633353830323432356164373431666336303066353730303631663832623666623064363788546f6b656e42534800b86ef86c00b869f867b3307837306537383964326635643436396561333065303532356462666464353531356436656164333064000000000000000000aa637861616462666536346236613465656262623335616464306439663036363335363964626239613138c7c6834554480a00000000000000000000820128a079a197281f6105f1c70edf7f0d8a3d5581bf34f1ee116bbbce272f11ca18cc6b00a0856f91bdfc65ee1e77d814019c6a6c2148afda812db6780dbb8cbf72c33a74cc0200f9025aaa307833303830324538363939343143363334376139303443613033343834304133304231643732386261f842a050d22373bb84ed1f9eeb581c913e6d45d918c05f8b1d90f0be168f06a4e6994aa000000000000000000000000070e789d2f5d469ea30e0525dbfdd5515d6ead30db901a00000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000003e6274703a2f2f30786638616163332e69636f6e2f6378616164626665363462366134656562626233356164643064396630363633353639646262396131380000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034554480000000000000000000000000000000000000000000000000000000000820128a079a197281f6105f1c70edf7f0d8a3d5581bf34f1ee116bbbce272f11ca18cc6b00a0856f91bdfc65ee1e77d814019c6a6c2148afda812db6780dbb8cbf72c33a74cc0300a079a197281f6105f1c70edf7f0d8a3d5581bf34f1ee116bbbce272f11ca18cc6b9400000000000000000000000000000000000000008307f558a0856f91bdfc65ee1e77d814019c6a6c2148afda812db6780dbb8cbf72c33a74cc82012800f90282f9027f02b9027bf90278aa307841614663384565614545386439433862443332363243434533443733453536446545334642373736e1a037be353f216cf7e33639101fd610c542e6a0c0109173fa1c1d8b04d34edb7c1bb901e00000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000003e6274703a2f2f30786638616163332e69636f6e2f637832373266333538303234323561643734316663363030663537303036316638326236666230643637000000000000000000000000000000000000000000000000000000000000000000f7f8f5b8396274703a2f2f307839372e6273632f307841614663384565614545386439433862443332363243434533443733453536446545334642373736b83e6274703a2f2f30786638616163332e69636f6e2f63783237326633353830323432356164373431666336303066353730303631663832623666623064363788546f6b656e42534800b86ef86c00b869f867b3307837306537383964326635643436396561333065303532356462666464353531356436656164333064000000000000000000aa637861616462666536346236613465656262623335616464306439663036363335363964626239613138c7c6834554480a00000000000000000000820128a079a197281f6105f1c70edf7f0d8a3d5581bf34f1ee116bbbce272f11ca18cc6b00a0856f91bdfc65ee1e77d814019c6a6c2148afda812db6780dbb8cbf72c33a74cc0200")
var rp *module.ReceiptProof
_, err = codec.RLP.UnmarshalFromBytes(bytes, &rp)

var receipt *Receipt
_, err = codec.RLP.UnmarshalFromBytes(rp.Proof, &receipt)

fmt.Println(receipt.TxHash)

receipts := []*Receipt{receipt}
trieObj := ReceiptTrie(receipts)
fmt.Println(trieObj.Hash())

/*transactionReceipt = rlp.encode([
uint( r.status || r.root ),
	uint( r.cumulativeGasUsed ),
	bytes256( r.logsBloom ),
	r.logs.map(l => [
address( l.address ),
l.topics.map( bytes32 ),
bytes( l.data )
])
].slice(r.status === null && r.root === null ? 1 : 0))*/

/*var ev EVMLog
_, err = codec.RLP.UnmarshalFromBytes(rp.EventProofs[0].Proof, &ev)

fmt.Println(ev.Address)*/
//}
