const Web3 = require('web3')
var Personal = require('web3-eth-personal')
const ethers = require('ethers')

var BMV = require("./build/contracts/BMV.json")

const URLSafeBase64 = require('urlsafe-base64');
const rlp = require('rlp');

//const web3 = new Web3('http://35.214.59.124:8545')
//const personal = new Personal('http://35.214.59.124:8545')

const web3 = new Web3('ws://localhost:8546')
const personal = new Personal('http://localhost:8545')
const provider = new ethers.providers.JsonRpcProvider('http://localhost:8545')

let owner = "0x70E789D2f5D469eA30e0525DbfDD5515d6EAd30D"

function hex_to_ascii(str1) {
  var hex  = str1.toString();
  var str = '';
  for (var n = 0; n < hex.length; n += 2) {
    str += String.fromCharCode(parseInt(hex.substr(n, 2), 16));
  }
  return str;
}

async function reason(hash) {
  console.log('tx hash:', hash)
  console.log('provider:', process.env.WEB3_URL)

  let tx = await provider.getTransaction(hash)
  if (!tx) {
    console.log('tx not found')
  } else {
    let code = await provider.call(tx, tx.blockNumber)
    let reason = hex_to_ascii(code.substr(138))
    console.log('revert reason:', reason)
  }
}

//let height = 721783
//let offset = 721783
//let lastHeight = 721783

let bshAddress = "0xc33B57f96F40b30Ef676c43fF5077c951995301a"

function errorJson(ex) {
  let lines = ex.toString().split('\n');
  lines.splice(0,1);
  return JSON.parse(lines.join('\n'));
}

async function handleMessage(bmv) {
  console.log(bmv.address)
  let base64Msg = "-Qjv-QWWuQK8-QK5uQGh-QGeAoMN_82HBciUF9L_t5UA1jxMc7Yj6X9nQH1oevTvz-SGpRWgAbDHCRSeZdrXrzjRtViv2Siez6SoZe4-ag8sNIgnMRKgUaJiUgJkAvvz1WvOv9bYhcqDvi1eXcHNHr6Lx_JfrligZ3LUBWCxhGBqqeyRzWgy1JVM3Cqk4bkFTVgzb8VkuP34AKDd89pbri3xcTYkao5LpHL7497EHvJpi2OIHi4hWG0amaIBACBwSCwaDwMEQQAwiGw6HxAAQqIwaJxSLxiMwcgRqBwEuND4zqDpWVmCjkSo_sGOr5BP9VObSozH7rbAYb7nhy043b09qPgAoK5eD6gCuCtfaCPAqo262NbArdJizA7UWV1lixQw7Lj2uIj4hqAKrtuwLI_LNEiboI2Qesus2K69ke-yQfwwV6gGcL5f76DOqWKZsOCc1dJ7M_l5LgRINyydgPW1PZth-cofTpsvD_gAoLDrX8AXFxwYh6W64pPIjmVnH0NzRs94pznds_PDanqqoPABSOCQaKpMEzQDXr6WutDittPI9yuZOhuPADFEF00TuQEQ-QENAOIBoFXgx480SosI1zbxKVYywb8THL7uEPkpTXv7e270pr12-Of4S4cFyJQX8ZN_uEHn8UHAopnHhMUi15usTBjy0whPds6umiKbumkyXDnHonyGBZ3p-ctAjcek_bdQ2ZzeUB5rhd_3R18raIYl62awAPhLhwXIlBfxjIK4QcFhjbhFi5ynR3lsYjfyubiKtHYU2MAuZfC0YDxYJRGEC2AItrKC0rzulH4s9GBPkGRaINtTiFM-nr8UrfDmYPwA-EuHBciUF_GGcrhBHAVjqDWDftM628sJlbISdBWK-b_YETQmrkbB3COYDt8FkB8iCtsrauZCldbpREDcXEFO31vH1ZEIjqHJox9T2QH4ALkC1PkC0bkBufkBtgKDDf_OhwXIlBfxkACVAHiC2s4l_36UfTolF4oqEWKHTP3coDTCfPGwAKYlbx5jYxxDZpoGIMNkbjl0fWD4umUgWALKoMaHh2xxH8xzoMchaYy8x1ISl3tLefDHrglk5cDy3F99oGdy1AVgsYRgaqnskc1oMtSVTNwqpOG5BU1YM2_FZLj9-ACg2nqomUClMqK4tC8ZFO7glJViUEpEIILQWwGX95dhGd-4OQCAIGQAFAwRA4SEITDIbA4MACBDocBInDYhDBBFotCIHAo3IJDE4xDI7IoSgJNJ5XLJRLYjL4HAQLjQ-M6g7FBB-vv9nRnqq06fGZrLskAJnP1yZazm0WVUwb3pnMD4AKCdcUqzpD3i5XowB2vJ3YXP8pj813h7UU5lO5cBl1Zf6biI-IagFNlGvFRYLPiTA6ZcWAIxCTMh5SjVVIF5VBhsjGnh45mgzqlimbDgnNXSezP5eS4ESDcsnYD1tT2bYfnKH06bLw_4AKCw61_AFxccGIeluuKTyI5lZx9Dc0bPeKc53bPzw2p6qqDwAUjgkGiqTBM0A16-lrrQ4rbTyPcrmTobjwAxRBdNE7kBEPkBDQDiAaB78JX8CmJtPdn2qwmiMntIRIxc-9Sw8jxHe3CvFtUyWPjn-EuHBciUGA_-7bhBqFOFTesHqrrOoL9EghrbmrMFCzXNS9ihbp_b381mvCsd70ebNS6NRLpEhlgItyVClMznVc2trlNG5FxNuf9dygH4S4cFyJQYD_ybuEG1HZQkew3PU6cyJZG0_mFa8NXBHQmmUN_oKTRFNRypii8_dksui_p5DADlGL7xxDGCR5rln9CQq5dyHXa-4nUcAfhLhwXIlBgQCe24QXim0OY2j9DLWJxPb6TOFy4puEBlhPNSB929ezNioq_Ofn8bcL3VpK6YfJ0jEdMQBdv34oqUPWDGqxnC_QhCdH4B-AD4APkDUbkDTvkDSwG5AcT5AcGj4hCgdepiau3myZOZ_Arw0zstTz8pGhhTm-4meqZMXKzuPES4U_hRoBm81oI6QeDBOqzunyV4eEY9JJsTgJlGnv_K6RfyUuVdoEEWpA8VTBglCrpKRFRTEuCuQhmrRJYABsuiyjo_LKDTgICAgICAgICAgICAgICAuQFF-QFCILkBPvkBOwCVAf-ag0Yip4BfznuS-ec5DyXaY-J4gwZ9XYMGfV2FAukO3QC47wEAAABAAgAACAAAAAAAEAAAAAAAAAAAAAAAAAAAAgAAQAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA-AD4AKC4PJeQoXeGerxzJV9cvPq_YO76UB3eJSNC0fbRa5m4ifkBgPkBfQC5AXn5AXa5AXP5AXCCIAC5AWr5AWeVAeKE0XdK3hdcJztSdCw3Y-xf5DhE-FOWTWVzc2FnZShzdHIsaW50LGJ5dGVzKbg5YnRwOi8vMHg5Ny5ic2MvMHhBYUZjOEVlYUVFOGQ5QzhiRDMyNjJDQ0UzRDczRTU2RGVFM0ZCNzc2A_j6uPj49rg6YnRwOi8vMHgwMy5pY29uL2N4ZTI4NGQxNzc0YWRlMTc1YzI3M2I1Mjc0MmMzNzYzZWM1ZmU0Mzg0NLg5YnRwOi8vMHg5Ny5ic2MvMHhBYUZjOEVlYUVFOGQ5QzhiRDMyNjJDQ0UzRDczRTU2RGVFM0ZCNzc2iFRva2VuQlNIB7hz-HEA-G6qaHgxNTA5NjhjZjczMTE0N2ZhNDAzOGY1OWJlNWYwZjI2M2YyNGJjYTgyuDlidHA6Ly8weDk3LmJzYy8weGI2ODc1MDBjZTc3OTkwNjA2Mzk2YzMzYTcyYjJFRTdiNUVEOTY1QkbHxoNFVEgFAA=="
  //let base64Msg = "-Rbi-RbcuQEx-QEuuLP4sQKCCXyHBciG9NNvwpUATEZKZkZ900K_TU5NVBXtnQIfByKgYx7yJkBlMhTiBW_cVVhujON65YOkB9uvr_bpK7yFLv2gQ3GWd-R25etOPaF_IpkoVie9Em6iQtJ9VatHuczXkVCgvynmB0zDoBLJz4t4SNbgFmshL6bi0MnovIARs07Gct34APgAgKbloDKivg9gVSo-1Q0o3cKQVPVJIGEv-BqT4UfuH_RbnebC-AD4ALh1-HMA4gGga8xHA4sp4DoeF5mZftcTWS0YsLujM2nf74A8iMQlUqj4TfhLhwXIhvTit-i4Qb77GWuG6UZj_9MOgs_wgjIWAGjjrFACVw5VasAINyjSIKRCZYiM1sytQBE74e2cEP1HSgHdO1pzN08bxt1I-YsB-AC5ATH5AS64s_ixAoIJfYcFyIb04rfolQBMRkpmRn3TQr9NTk1UFe2dAh8HIqDs86FmJxi0Ru0X97tNYRKuqnt5Lh-CKaujIeSP6fMluqBMYcoHVeMhy1mNzHDM6gk_jeovyGL3Pm5b2k6dR9e_bKC_KeYHTMOgEsnPi3hI1uAWayEvpuLQyei8gBGzTsZy3fgA-ACApuWgMqK-D2BVKj7VDSjdwpBU9UkgYS_4GpPhR-4f9Fud5sL4APgAuHX4cwDiAaBGXoTgw2842-pN-zHSYF8Jxa6LYH2zJeJZetWtcRjrT_hN-EuHBciG9PH92rhBgPCGQtg7atHDJWLK2k1KCybzFj0r7UQKUqZj1hJgudBDr9dhLtYGVu9FxGZ5VyRGRj0v5TVt0ef_D4TVwCNN-gD4ALkBMfkBLriz-LECggl-hwXIhvTx_dqVAExGSmZGfdNCv01OTVQV7Z0CHwcioEinvgzp9Vc9QjNM2lM7X_ZbsypB5lwSczihq-kjq6IZoJSSdhDxtqeVnLRipC-EcFOWnSoifw9NAgefxSXfyD08oL8p5gdMw6ASyc-LeEjW4BZrIS-m4tDJ6LyAEbNOxnLd-AD4AICm5aAyor4PYFUqPtUNKN3CkFT1SSBhL_gak-FH7h_0W53mwvgA-AC4dfhzAOIBoGJsfvWuz5d1PgbIGoIIXa_M7lBVt_2yIV04m7UV61M1-E34S4cFyIb1AUPvuEGqQXohSc-DOhbhgkBgvVov99gl0CdZdog_kCXjoPpEFhpjwcj4LXzDnrAsiM9T_YtUOGHi8EBfq462Yy30P2SdAfgAuQEx-QEuuLP4sQKCCX-HBciG9QFD75UATEZKZkZ900K_TU5NVBXtnQIfByKg3h7S1GgwxULefkZRq7FlPZeBX62j4ZTbVjTn2TQO19yg26ccPqoypqcoyZnKqjr6iMnhQW6NQ0bMb2353GTcvaegvynmB0zDoBLJz4t4SNbgFmshL6bi0MnovIARs07Gct34APgAgKbloDKivg9gVSo-1Q0o3cKQVPVJIGEv-BqT4UfuH_RbnebC-AD4ALh1-HMA4gGgF1TM1Rsj_wjJf2l_pg-FaklFMZzmS-B5kOmLrnqwyoH4TfhLhwXIhvUQlYC4QcQbwihNgaULC7zlWn7OYS_f0etyajpORNFNjczzDi7oYCMDUtbsMKXNtjh3FY1F-F0u8g30Pq26INA3AT9JgMcA-AC5ATH5AS64s_ixAoIJgIcFyIb1EJWAlQBMRkpmRn3TQr9NTk1UFe2dAh8HIqCzQdUGIhWbePzpV-mhkZzteQb1bTlcTlkAgeXgEqyXpaBN_yrjSQybQAOlXHXlug1RZPKiZ0b0nrk6E945LwWpT6C_KeYHTMOgEsnPi3hI1uAWayEvpuLQyei8gBGzTsZy3fgA-ACApuWgMqK-D2BVKj7VDSjdwpBU9UkgYS_4GpPhR-4f9Fud5sL4APgAuHX4cwDiAaDY427By_3A4oQrJJ3iFevAS_XXJCwx0b24hfDAk-kAtfhN-EuHBciG9R_R37hBy-ykTSrdlkYqpA-KpuaYxz8tLng8q5OCnFPSzkKbjh9Ai2C48KHrUODSU8PjIe6zctWYIZCHG2HDBujAbJeJVAH4ALkBMfkBLriz-LECggmBhwXIhvUf0d-VAExGSmZGfdNCv01OTVQV7Z0CHwcioO9Q0mH6U9zSEbJ8R7hJMmpvVK-ZiqdRjmApxh3xJZPqoA01Cg-QstcL8B6GE-UTjON08ew9al_v2EkHNYuNF1mDoL8p5gdMw6ASyc-LeEjW4BZrIS-m4tDJ6LyAEbNOxnLd-AD4AICm5aAyor4PYFUqPtUNKN3CkFT1SSBhL_gak-FH7h_0W53mwvgA-AC4dfhzAOIBoB17qaNRhacRRv7URMZr9-U4-SbrMq1vyC3-l0HR3loh-E34S4cFyIb1LyBcuEFSSMJvIj_L9Q_qfMzOvRRvzbHnayiC6cwzONO9zkTwCl5UIjFZNIRZP1ZZyyM-NDWmXhTweCw9Eou72r3wWBY9AfgAuQEx-QEuuLP4sQKCCYKHBciG9S8gXJUATEZKZkZ900K_TU5NVBXtnQIfByKglNL-vb5gjYp2AJGkODmnqXuJsmKbtt0kMkxiq6hZjxygKIO-V2C_wEeH3KyWutCnTTOhwBMKgRDVBGkRYoFkHiqgvynmB0zDoBLJz4t4SNbgFmshL6bi0MnovIARs07Gct34APgAgKbloDKivg9gVSo-1Q0o3cKQVPVJIGEv-BqT4UfuH_RbnebC-AD4ALh1-HMA4gGgraBJknj-2nMGroShHMEKTFnrCCqK3jrYLRA1LQUzTsT4TfhLhwXIhvU-cmu4QeDAhjJgRJzS1GjBx_2zWenTJ7DlKbpwO_3PkqnrgIrVX6YAhgHKHTv1XifqS44MCSDOMlupLRXDIv6ZGS3J7yoA-AC5ATH5AS64s_ixAoIJg4cFyIb1PnJrlQBMRkpmRn3TQr9NTk1UFe2dAh8HIqCqk4rcEzh8wtFop8GnB8wTzV2DFORB1ADSH_gHOsroNaCwzUp-39tUxHFiuOF3D7C6V9KVoJpMYOFCocP8Wp7o4qC_KeYHTMOgEsnPi3hI1uAWayEvpuLQyei8gBGzTsZy3fgA-ACApuWgMqK-D2BVKj7VDSjdwpBU9UkgYS_4GpPhR-4f9Fud5sL4APgAuHX4cwDiAaDNOCoFZDniAnjwPRmsatS9GUiRHsrymSmmOwzxIpa8y_hN-EuHBciG9U216LhBrCIOdlKNp7o_ovV4DbpZ3Gw2pWji31g96et4FIPijDFBa-uPxOneaMVFxhxslBxGCXFad9R_lnk9-33m0OthuAD4ALkBMfkBLriz-LECggmEhwXIhvVNteiVAExGSmZGfdNCv01OTVQV7Z0CHwcioPPGoWhm_jAzY5FxMZYLwWmTVt2yqRQJgPITBZV8fOehoLK-5irszb9LWBaucAXknfDXL3Brb2BsWosAcb-0q8ploL8p5gdMw6ASyc-LeEjW4BZrIS-m4tDJ6LyAEbNOxnLd-AD4AICm5aAyor4PYFUqPtUNKN3CkFT1SSBhL_gak-FH7h_0W53mwvgA-AC4dfhzAOIBoBcYS0P4mgNjdaXSHDXe7uqBvato1Cr2CNHFGBtlyOdw-E34S4cFyIb1XQCCuEFV1xK6Em2ogrvrPjcFaFh7ycGGWgoYedtqYFIRv6NJUQWbrEaTuJKK3PWgbmx0dzQVqU4dZayhlAiPfbUdoGYPAPgAuQEx-QEuuLP4sQKCCYWHBciG9V0AgpUATEZKZkZ900K_TU5NVBXtnQIfByKgkThQXlCXFwy3dL2P9gwt5jQTsBa_A9L6k6ZwelpMwaKgIs6wj1df8lNbHn28vJl0OZa0km2ugQ_x-uy5Did5_rygvynmB0zDoBLJz4t4SNbgFmshL6bi0MnovIARs07Gct34APgAgKbloDKivg9gVSo-1Q0o3cKQVPVJIGEv-BqT4UfuH_RbnebC-AD4ALh1-HMA4gGgDCkTfG5ayHuyXBuct8vyJ71x4EDfXXwlB3OZJUuTJZH4TfhLhwXIhvVsRkW4QSLZTb8wydNS7HPIg_hSyoFFwQjzP5pTJ9QqlTE6chhXTpWTWUmGvWgEtb0x12DCkicK-VAcbQfjwcSULC56l_AB-AC5ATH5AS64s_ixAoIJhocFyIb1bEZFlQBMRkpmRn3TQr9NTk1UFe2dAh8HIqBKhxrNfyIKSF4sm_uSziWCxcayW66_UrxoJLwYmeOzbKASX1kmlQmA-eShLFxah6Qp6rEaVZVdFMqG93brbI8jAqC_KeYHTMOgEsnPi3hI1uAWayEvpuLQyei8gBGzTsZy3fgA-ACApuWgMqK-D2BVKj7VDSjdwpBU9UkgYS_4GpPhR-4f9Fud5sL4APgAuHX4cwDiAaDd98WDRz5C0bmyN7ru2Wls74A2HQsq3ZCBdhbu638C9_hN-EuHBciG9XuQ0LhBze_TQVtGufsbwv8WxeeRFE6UVSPw1Qj-6dVpdISfEyVdIPkPt_ZPV32oN_KhUCzPNknjds6MjacTu0-U_pe5aQH4ALkBMfkBLriz-LECggmHhwXIhvV7kNCVAExGSmZGfdNCv01OTVQV7Z0CHwcioOD6OvMv68mbjRXlZm15gCC4QGI3DKWxfGghm2nP6PXBoI6mrvq4WF98Sn1gBExq1AJJBHA2k-6LNl-_rjO8RjokoL8p5gdMw6ASyc-LeEjW4BZrIS-m4tDJ6LyAEbNOxnLd-AD4AICm5aAyor4PYFUqPtUNKN3CkFT1SSBhL_gak-FH7h_0W53mwvgA-AC4dfhzAOIBoAVs23nAg-TUtamqOMGTuowdkZ1gJ0oLW5_SpRj9Y7r7-E34S4cFyIb1iuE7uEGceUmb37dT8Nzr8Ph7VHSogX9GDm5O3P_HdXbuVq0k8DEQhXrDEIzq5HEO5B9HJKxbX47j08LuI5fgKXLpUPhUAPgAuQEx-QEuuLP4sQKCCYiHBciG9YrhO5UATEZKZkZ900K_TU5NVBXtnQIfByKg_gFzd6bKxNnofaB1vrIIwXecqvCLMMw3KuJfOFWCUUCgcmkigX9wb36yfxYLZJS6dmjTlmgIoruSg33hU92qkqqgvynmB0zDoBLJz4t4SNbgFmshL6bi0MnovIARs07Gct34APgAgKbloDKivg9gVSo-1Q0o3cKQVPVJIGEv-BqT4UfuH_RbnebC-AD4ALh1-HMA4gGgq_a3q93PHyZ2iGmiXShQzqRSJMnbY9C3cRAL8L7w-mP4TfhLhwXIhvWaI1K4QTLSR6153phpHnjSBGfIfQ83n8NyAWXg5rFTN_55MlBrNaGxYjclsnzbf0ebrsmCMTl9aQgmuCz92-7pFpikw7gA-AC5ATH5AS64s_ixAoIJiYcFyIb1miNSlQBMRkpmRn3TQr9NTk1UFe2dAh8HIqCRqWfMM2FwdTDfyZ2ge60e19qSHgEK5xYOC8Nqd1ay5aBgfNnnQ_g1meAC_uNTShmsz74_nvRI0cr8efGAlgtd9aC_KeYHTMOgEsnPi3hI1uAWayEvpuLQyei8gBGzTsZy3fgA-ACApuWgMqK-D2BVKj7VDSjdwpBU9UkgYS_4GpPhR-4f9Fud5sL4APgAuHX4cwDiAaBO5gPUOXSP1FQk-d7w4xpPbh03MvXRwvagr08ebhzGFfhN-EuHBciG9alsF7hBdhcWPLHJXQwxFuH72XHST2AHzjW9Kfl9c6m-ObaEL2NrRS9YKpY7rjvOE2PzOZt648p4BrlLJtvoEn_j2MjOqAH4ALkBMfkBLriz-LECggmKhwXIhvWpbBeVAExGSmZGfdNCv01OTVQV7Z0CHwcioPbU21OJFT_uIiNlhehhzicfrzYkFgiC7x3aed_5gNu0oLm7F55Iejy5vxNeQyR0ETzKWoehWEMT4CS7sMULdQLRoL8p5gdMw6ASyc-LeEjW4BZrIS-m4tDJ6LyAEbNOxnLd-AD4AICm5aAyor4PYFUqPtUNKN3CkFT1SSBhL_gak-FH7h_0W53mwvgA-AC4dfhzAOIBoKBhe20WXiq8G2OrX8qVCDzZFDdwhmLRdBECNbBP7hcU-E34S4cFyIb1uLT0uEH-GcKG8tlrQK_hmaRmpKklCEYrVdLfdD6ST98p44JMu2CRuflpJLbH971YnLM0l_y7vMQkoasWVudd1cY5S1IUAPgAuQEx-QEuuLP4sQKCCYuHBciG9bi09JUATEZKZkZ900K_TU5NVBXtnQIfByKgf4KSGGWdhjOgrZ5Cvc9mrpPWxAApL4iN6hyAdej2Yt-gWxe_W_Z6Afdiu2asLxEa0O7PCnmRINoKTDk_xQYfI0-gvynmB0zDoBLJz4t4SNbgFmshL6bi0MnovIARs07Gct34APgAgKbloDKivg9gVSo-1Q0o3cKQVPVJIGEv-BqT4UfuH_RbnebC-AD4ALh1-HMA4gGgDCgGOlE1cIPbRi2zZlKnKxi8jbI_u9yMqQspOhZj7Tn4TfhLhwXIhvXH62q4QcDLpbfHwd0ecjMOvmvFGEI8H53HASUA4-VTB1fWnGHxLNP4B80AzlnUM2alPZbPZOE6VuyrX06yrXX8br1nz98A-AC5ATH5AS64s_ixAoIJjIcFyIb1x-tqlQBMRkpmRn3TQr9NTk1UFe2dAh8HIqA36GLmXzjFuzEhXSALyelS73nWeNXtLx5eUjJrhLChAKBAkeQJrfgFyxh-fP5JV8PbOAtg-rL0sxIhf3epBcHqGqC_KeYHTMOgEsnPi3hI1uAWayEvpuLQyei8gBGzTsZy3fgA-ACApuWgMqK-D2BVKj7VDSjdwpBU9UkgYS_4GpPhR-4f9Fud5sL4APgAuHX4cwDiAaBFPFlYHVaWAXgGpMUYYtc34BXzVZJb5gsJWkGiuAD_CfhN-EuHBciG9dc4ZbhBSasSHiaIegC-H7u_FRSUGspZY6y6rPznZTnicg7AvYRcISCqU8ZkV8il0R01FkOXbdJdeBytwRWdRg4eG7NhKAH4ALkBMfkBLriz-LECggmNhwXIhvXXOGWVAExGSmZGfdNCv01OTVQV7Z0CHwcioH0-FjcOS9rpfZ6RCHh97ss80C7LMI8Hv9UTqhQOA0btoEJuJxe4g6Uvm3nNn5nBg1jQ37a2sg2VQ_f0mj6AYeX-oL8p5gdMw6ASyc-LeEjW4BZrIS-m4tDJ6LyAEbNOxnLd-AD4AICm5aAyor4PYFUqPtUNKN3CkFT1SSBhL_gak-FH7h_0W53mwvgA-AC4dfhzAOIBoF6k0gnUO89g2CpvU-6E3of4viFR91Bi0kcY1Gqd81f_-E34S4cFyIb15oRzuEEGm41yXUHyuHV0vnJGx8JQ-Eznr4vnOakxwjXh0uJXuw6hfPuhpDe3A_dT3ZROCcRThlu12r9-q9wUyxrZapBzAPgAuQEx-QEuuLP4sQKCCY6HBciG9eaEc5UATEZKZkZ900K_TU5NVBXtnQIfByKgTN5qIg0cVCrDqA0fIZ8d8kafYI5qNNDHBGaRL1LOyFKgCYaXS6Zp08zxDlpJVhtX5m8iBBbmZp39rFziSbJOObCgvynmB0zDoBLJz4t4SNbgFmshL6bi0MnovIARs07Gct34APgAgKbloDKivg9gVSo-1Q0o3cKQVPVJIGEv-BqT4UfuH_RbnebC-AD4ALh1-HMA4gGgd9nUnVqR1Qmwr2qnTT_fDnasBKGYAJOvg9Gw0RA4HRz4TfhLhwXIhvX1U4y4QWZ76W0sh3xoCZ4UxUOVd9cECafxKg4ea05jjylqkeuRHRlC4_tHjf2L5-fLFr4oih-Zt47rEEgyE_G-n1d4DgQB-AD4AMA="
  //base64Msg = _.padEnd(base64Msg, base64Msg.length + (4 - base64Msg.length % 4) % 4, '=');
  try {
    //await bmv.methods.handleRelayMessage(link1, link, 1, base64Msg).send({from: owner, gas:850000})
     await bmv.methods.handleRelayMessage(link, link1, 1, base64Msg).send({from: owner, gas:2500000})

  } catch (ex) {
    let error = errorJson(ex)
    console.log("Transaction failed, ", error.transactionHash);
    reason(error.transactionHash)
  }
  //let tx = await bmv.methods.handleRelayMessage(bmc._address, link, 0, msg).send({from: owner, gas: 750000})
  
}

let height = 917181
let offset = 917180
let lastHeight = 917180

let blockInterval = 15000
let maxAggregation = 1
let delayLimit = 3

let network1 = '0x97.bsc'
let network = "0x03.icon"
let link1 = 'btp://0x97.bsc/cxe284d1774ade175c273b52742c3763ec5fe43844'
let link = "btp://0x03.icon/cxe284d1774ade175c273b52742c3763ec5fe43844"

async function main() {
  const accounts = await web3.eth.getAccounts()
  await personal.unlockAccount(owner, "Perlia0", 60*60*12)
  let balance = await  web3.eth.getBalance(owner)
  console.log("Owner Balance: ", web3.utils.fromWei(balance ,"ether"))

  let bmv = new web3.eth.Contract(BMV.abi, "0x76fFa7C2023b9eDCEb9369F67876b6c2920c2488")

  await handleMessage(bmv)
 // console.log(tx.transactionHash, tx.status)

  //console.log(await bmv.methods.getStatus().call())

}

main().then(r => console
    .log("Done."))